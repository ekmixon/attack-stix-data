import argparse
import json
from tabulate import tabulate
from dateutil.parser import isoparse

def index_to_markdown(index):
    """
    convert the index (dict) to a markdown string and return the markdown string
    """
    lines = [
        "<!-- begin index generated by util/index-to-md.py -->",
        f"## {index['name']}",
        f"\n{index['description']}\n",
        f"### {index['name']} Collections\n",
    ]


    for collection in index['collections']:
        lines.extend(
            (f"#### {collection['name']}", f"\n{collection['description']}\n")
        )

        format_versions = list(map(lambda v: [
            f"[{collection['name']} v{v['version']}]({v['url']})",
            isoparse(v['modified']).strftime("%d %B %Y")
        ], collection["versions"]))

        lines.extend(
            (
                tabulate(
                    format_versions,
                    headers=['version', 'released'],
                    tablefmt="github",
                ),
                "",
            )
        )

    lines.append("<!-- end index generated by util/index-to-md.py -->")

    return "\n".join(lines)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
         description="Print a markdown string to std-out representing a collection index"
    )
    parser.add_argument("-index",
        type=str,
        default="index.json",
        help="the collection index file to convert to markdown"
    )
    parser.add_argument("-output",
        type=str,
        default="index.md",
        help="markdown output file"
    )
    args = parser.parse_args()
    with open(args.index, "r") as f:
        index = json.load(f)
        with open(args.output, "w") as f:
            f.write(index_to_markdown(index))